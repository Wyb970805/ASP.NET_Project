#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _2222222222
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CommentDB")]
	public partial class CommentDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertReply(Reply instance);
    partial void UpdateReply(Reply instance);
    partial void DeleteReply(Reply instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertRecipePost(RecipePost instance);
    partial void UpdateRecipePost(RecipePost instance);
    partial void DeleteRecipePost(RecipePost instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    #endregion
		
		public CommentDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CommentDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CommentDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CommentDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CommentDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CommentDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Reply> Replies
		{
			get
			{
				return this.GetTable<Reply>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<RecipePost> RecipePosts
		{
			get
			{
				return this.GetTable<RecipePost>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reply")]
	public partial class Reply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _replyID;
		
		private int _commentID;
		
		private string _userID;
		
		private string _content;
		
		private System.DateTime _replyDate;
		
		private System.Nullable<int> _like;
		
		private EntityRef<User> _User;
		
		private EntityRef<Comment> _Comment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnreplyIDChanging(int value);
    partial void OnreplyIDChanged();
    partial void OncommentIDChanging(int value);
    partial void OncommentIDChanged();
    partial void OnuserIDChanging(string value);
    partial void OnuserIDChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void OnreplyDateChanging(System.DateTime value);
    partial void OnreplyDateChanged();
    partial void OnlikeChanging(System.Nullable<int> value);
    partial void OnlikeChanged();
    #endregion
		
		public Reply()
		{
			this._User = default(EntityRef<User>);
			this._Comment = default(EntityRef<Comment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_replyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int replyID
		{
			get
			{
				return this._replyID;
			}
			set
			{
				if ((this._replyID != value))
				{
					this.OnreplyIDChanging(value);
					this.SendPropertyChanging();
					this._replyID = value;
					this.SendPropertyChanged("replyID");
					this.OnreplyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commentID", DbType="Int NOT NULL")]
		public int commentID
		{
			get
			{
				return this._commentID;
			}
			set
			{
				if ((this._commentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncommentIDChanging(value);
					this.SendPropertyChanging();
					this._commentID = value;
					this.SendPropertyChanged("commentID");
					this.OncommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Char(5) NOT NULL", CanBeNull=false)]
		public string userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="VarChar(800) NOT NULL", CanBeNull=false)]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_replyDate", DbType="Date NOT NULL")]
		public System.DateTime replyDate
		{
			get
			{
				return this._replyDate;
			}
			set
			{
				if ((this._replyDate != value))
				{
					this.OnreplyDateChanging(value);
					this.SendPropertyChanging();
					this._replyDate = value;
					this.SendPropertyChanged("replyDate");
					this.OnreplyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[like]", Storage="_like", DbType="Int")]
		public System.Nullable<int> like
		{
			get
			{
				return this._like;
			}
			set
			{
				if ((this._like != value))
				{
					this.OnlikeChanging(value);
					this.SendPropertyChanging();
					this._like = value;
					this.SendPropertyChanged("like");
					this.OnlikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Reply", Storage="_User", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Replies.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Replies.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Reply", Storage="_Comment", ThisKey="commentID", OtherKey="commentID", IsForeignKey=true)]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.Replies.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.Replies.Add(this);
						this._commentID = value.commentID;
					}
					else
					{
						this._commentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userID;
		
		private string _userName;
		
		private string _userEmail;
		
		private string _userContactNo;
		
		private string _userPassword;
		
		private decimal _walletBalance;
		
		private string _userType;
		
		private EntitySet<Reply> _Replies;
		
		private EntitySet<RecipePost> _RecipePosts;
		
		private EntitySet<Comment> _Comments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(string value);
    partial void OnuserIDChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnuserEmailChanging(string value);
    partial void OnuserEmailChanged();
    partial void OnuserContactNoChanging(string value);
    partial void OnuserContactNoChanged();
    partial void OnuserPasswordChanging(string value);
    partial void OnuserPasswordChanged();
    partial void OnwalletBalanceChanging(decimal value);
    partial void OnwalletBalanceChanged();
    partial void OnuserTypeChanging(string value);
    partial void OnuserTypeChanged();
    #endregion
		
		public User()
		{
			this._Replies = new EntitySet<Reply>(new Action<Reply>(this.attach_Replies), new Action<Reply>(this.detach_Replies));
			this._RecipePosts = new EntitySet<RecipePost>(new Action<RecipePost>(this.attach_RecipePosts), new Action<RecipePost>(this.detach_RecipePosts));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Char(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userEmail", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string userEmail
		{
			get
			{
				return this._userEmail;
			}
			set
			{
				if ((this._userEmail != value))
				{
					this.OnuserEmailChanging(value);
					this.SendPropertyChanging();
					this._userEmail = value;
					this.SendPropertyChanged("userEmail");
					this.OnuserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userContactNo", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string userContactNo
		{
			get
			{
				return this._userContactNo;
			}
			set
			{
				if ((this._userContactNo != value))
				{
					this.OnuserContactNoChanging(value);
					this.SendPropertyChanging();
					this._userContactNo = value;
					this.SendPropertyChanged("userContactNo");
					this.OnuserContactNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userPassword", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string userPassword
		{
			get
			{
				return this._userPassword;
			}
			set
			{
				if ((this._userPassword != value))
				{
					this.OnuserPasswordChanging(value);
					this.SendPropertyChanging();
					this._userPassword = value;
					this.SendPropertyChanged("userPassword");
					this.OnuserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_walletBalance", DbType="Decimal(5,2) NOT NULL")]
		public decimal walletBalance
		{
			get
			{
				return this._walletBalance;
			}
			set
			{
				if ((this._walletBalance != value))
				{
					this.OnwalletBalanceChanging(value);
					this.SendPropertyChanging();
					this._walletBalance = value;
					this.SendPropertyChanged("walletBalance");
					this.OnwalletBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userType", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string userType
		{
			get
			{
				return this._userType;
			}
			set
			{
				if ((this._userType != value))
				{
					this.OnuserTypeChanging(value);
					this.SendPropertyChanging();
					this._userType = value;
					this.SendPropertyChanged("userType");
					this.OnuserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Reply", Storage="_Replies", ThisKey="userID", OtherKey="userID")]
		public EntitySet<Reply> Replies
		{
			get
			{
				return this._Replies;
			}
			set
			{
				this._Replies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RecipePost", Storage="_RecipePosts", ThisKey="userID", OtherKey="userID")]
		public EntitySet<RecipePost> RecipePosts
		{
			get
			{
				return this._RecipePosts;
			}
			set
			{
				this._RecipePosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="userID", OtherKey="userID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Replies(Reply entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Replies(Reply entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_RecipePosts(RecipePost entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_RecipePosts(RecipePost entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RecipePost")]
	public partial class RecipePost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _recipeID;
		
		private string _userID;
		
		private string _recipeCategory;
		
		private string _recipeDesc;
		
		private string _recipeTitle;
		
		private int _recipeServings;
		
		private string _recipeIngredients;
		
		private string _cookingSteps;
		
		private System.Data.Linq.Binary _recipeImage;
		
		private decimal _recipePrice;
		
		private System.DateTime _date;
		
		private EntitySet<Comment> _Comments;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrecipeIDChanging(string value);
    partial void OnrecipeIDChanged();
    partial void OnuserIDChanging(string value);
    partial void OnuserIDChanged();
    partial void OnrecipeCategoryChanging(string value);
    partial void OnrecipeCategoryChanged();
    partial void OnrecipeDescChanging(string value);
    partial void OnrecipeDescChanged();
    partial void OnrecipeTitleChanging(string value);
    partial void OnrecipeTitleChanged();
    partial void OnrecipeServingsChanging(int value);
    partial void OnrecipeServingsChanged();
    partial void OnrecipeIngredientsChanging(string value);
    partial void OnrecipeIngredientsChanged();
    partial void OncookingStepsChanging(string value);
    partial void OncookingStepsChanged();
    partial void OnrecipeImageChanging(System.Data.Linq.Binary value);
    partial void OnrecipeImageChanged();
    partial void OnrecipePriceChanging(decimal value);
    partial void OnrecipePriceChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    #endregion
		
		public RecipePost()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recipeID", DbType="Char(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string recipeID
		{
			get
			{
				return this._recipeID;
			}
			set
			{
				if ((this._recipeID != value))
				{
					this.OnrecipeIDChanging(value);
					this.SendPropertyChanging();
					this._recipeID = value;
					this.SendPropertyChanged("recipeID");
					this.OnrecipeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Char(5) NOT NULL", CanBeNull=false)]
		public string userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recipeCategory", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string recipeCategory
		{
			get
			{
				return this._recipeCategory;
			}
			set
			{
				if ((this._recipeCategory != value))
				{
					this.OnrecipeCategoryChanging(value);
					this.SendPropertyChanging();
					this._recipeCategory = value;
					this.SendPropertyChanged("recipeCategory");
					this.OnrecipeCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recipeDesc", DbType="VarChar(800) NOT NULL", CanBeNull=false)]
		public string recipeDesc
		{
			get
			{
				return this._recipeDesc;
			}
			set
			{
				if ((this._recipeDesc != value))
				{
					this.OnrecipeDescChanging(value);
					this.SendPropertyChanging();
					this._recipeDesc = value;
					this.SendPropertyChanged("recipeDesc");
					this.OnrecipeDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recipeTitle", DbType="VarChar(35) NOT NULL", CanBeNull=false)]
		public string recipeTitle
		{
			get
			{
				return this._recipeTitle;
			}
			set
			{
				if ((this._recipeTitle != value))
				{
					this.OnrecipeTitleChanging(value);
					this.SendPropertyChanging();
					this._recipeTitle = value;
					this.SendPropertyChanged("recipeTitle");
					this.OnrecipeTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recipeServings", DbType="Int NOT NULL")]
		public int recipeServings
		{
			get
			{
				return this._recipeServings;
			}
			set
			{
				if ((this._recipeServings != value))
				{
					this.OnrecipeServingsChanging(value);
					this.SendPropertyChanging();
					this._recipeServings = value;
					this.SendPropertyChanged("recipeServings");
					this.OnrecipeServingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recipeIngredients", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string recipeIngredients
		{
			get
			{
				return this._recipeIngredients;
			}
			set
			{
				if ((this._recipeIngredients != value))
				{
					this.OnrecipeIngredientsChanging(value);
					this.SendPropertyChanging();
					this._recipeIngredients = value;
					this.SendPropertyChanged("recipeIngredients");
					this.OnrecipeIngredientsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cookingSteps", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string cookingSteps
		{
			get
			{
				return this._cookingSteps;
			}
			set
			{
				if ((this._cookingSteps != value))
				{
					this.OncookingStepsChanging(value);
					this.SendPropertyChanging();
					this._cookingSteps = value;
					this.SendPropertyChanged("cookingSteps");
					this.OncookingStepsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recipeImage", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary recipeImage
		{
			get
			{
				return this._recipeImage;
			}
			set
			{
				if ((this._recipeImage != value))
				{
					this.OnrecipeImageChanging(value);
					this.SendPropertyChanging();
					this._recipeImage = value;
					this.SendPropertyChanged("recipeImage");
					this.OnrecipeImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recipePrice", DbType="Decimal(3,2) NOT NULL")]
		public decimal recipePrice
		{
			get
			{
				return this._recipePrice;
			}
			set
			{
				if ((this._recipePrice != value))
				{
					this.OnrecipePriceChanging(value);
					this.SendPropertyChanging();
					this._recipePrice = value;
					this.SendPropertyChanged("recipePrice");
					this.OnrecipePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecipePost_Comment", Storage="_Comments", ThisKey="recipeID", OtherKey="recipeID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RecipePost", Storage="_User", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.RecipePosts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.RecipePosts.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.RecipePost = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.RecipePost = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _commentID;
		
		private string _recipeID;
		
		private string _userID;
		
		private string _content;
		
		private string _commentDate;
		
		private System.Nullable<int> _like;
		
		private EntitySet<Reply> _Replies;
		
		private EntityRef<RecipePost> _RecipePost;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncommentIDChanging(int value);
    partial void OncommentIDChanged();
    partial void OnrecipeIDChanging(string value);
    partial void OnrecipeIDChanged();
    partial void OnuserIDChanging(string value);
    partial void OnuserIDChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void OncommentDateChanging(string value);
    partial void OncommentDateChanged();
    partial void OnlikeChanging(System.Nullable<int> value);
    partial void OnlikeChanged();
    #endregion
		
		public Comment()
		{
			this._Replies = new EntitySet<Reply>(new Action<Reply>(this.attach_Replies), new Action<Reply>(this.detach_Replies));
			this._RecipePost = default(EntityRef<RecipePost>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int commentID
		{
			get
			{
				return this._commentID;
			}
			set
			{
				if ((this._commentID != value))
				{
					this.OncommentIDChanging(value);
					this.SendPropertyChanging();
					this._commentID = value;
					this.SendPropertyChanged("commentID");
					this.OncommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recipeID", DbType="Char(5) NOT NULL", CanBeNull=false)]
		public string recipeID
		{
			get
			{
				return this._recipeID;
			}
			set
			{
				if ((this._recipeID != value))
				{
					if (this._RecipePost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrecipeIDChanging(value);
					this.SendPropertyChanging();
					this._recipeID = value;
					this.SendPropertyChanged("recipeID");
					this.OnrecipeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Char(5) NOT NULL", CanBeNull=false)]
		public string userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="VarChar(800) NOT NULL", CanBeNull=false)]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commentDate", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string commentDate
		{
			get
			{
				return this._commentDate;
			}
			set
			{
				if ((this._commentDate != value))
				{
					this.OncommentDateChanging(value);
					this.SendPropertyChanging();
					this._commentDate = value;
					this.SendPropertyChanged("commentDate");
					this.OncommentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[like]", Storage="_like", DbType="Int")]
		public System.Nullable<int> like
		{
			get
			{
				return this._like;
			}
			set
			{
				if ((this._like != value))
				{
					this.OnlikeChanging(value);
					this.SendPropertyChanging();
					this._like = value;
					this.SendPropertyChanged("like");
					this.OnlikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Reply", Storage="_Replies", ThisKey="commentID", OtherKey="commentID")]
		public EntitySet<Reply> Replies
		{
			get
			{
				return this._Replies;
			}
			set
			{
				this._Replies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecipePost_Comment", Storage="_RecipePost", ThisKey="recipeID", OtherKey="recipeID", IsForeignKey=true)]
		public RecipePost RecipePost
		{
			get
			{
				return this._RecipePost.Entity;
			}
			set
			{
				RecipePost previousValue = this._RecipePost.Entity;
				if (((previousValue != value) 
							|| (this._RecipePost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecipePost.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._RecipePost.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._recipeID = value.recipeID;
					}
					else
					{
						this._recipeID = default(string);
					}
					this.SendPropertyChanged("RecipePost");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Replies(Reply entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_Replies(Reply entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
	}
}
#pragma warning restore 1591
